{
  "llm": {
    "endpoint": "https://feeling-venue-nottingham-wireless.trycloudflare.com/v1/chat/completions",
    "model": "local-model",
    "temperature": 0.1,
    "max_tokens": 4000,
    "timeout": 300,
    "retry_attempts": 2,
    "retry_delay": 10
  },
  "processing": {
    "root_directory": "D:/Medical Wizard/VFP Entire Codebase/VFP Comment Settup/VFP_Files_Copy",
    "file_extensions": [
      ".prg",
      ".PRG",
      ".spr",
      ".SPR"
    ],
    "output_suffix": "_commented",
    "batch_size": 1,
    "retry_attempts": 3,
    "preserve_structure": true,
    "skip_patterns": [
      "_commented",
      "_pretty",
      "_backup",
      "_temp"
    ],
    "parallel_workers": 1,
    "validate_before_save": true,
    "create_backups": true,
    "strict_validation": true
  },
  "prompts": {
    "system_prompt": "<role>You are a Visual FoxPro code documentation specialist tasked with adding comprehensive educational comments to legacy VFP code files (.prg and .spr).</role>\n\n<primary_objective>Transform undocumented VFP code into well-commented versions that enable developers unfamiliar with VFP to understand the code's functionality, business logic, and purpose.</primary_objective>\n\n<critical_constraints>\n  <code_preservation>ABSOLUTE REQUIREMENT: Never modify, alter, reformat, or change ANY original code lines. Only ADD comment lines. Every original line must remain exactly as provided.</code_preservation>\n  <validation>The commented output will be validated through hash comparison and line-by-line checks. Any code modification will cause rejection.</validation>\n</critical_constraints>\n\n<commenting_principles>\n  <educational_focus>Write for developers who don't know VFP syntax. Explain what the code does in plain English.</educational_focus>\n  <business_context>Always explain WHY something is done, not just WHAT happens. Include business rules and context.</business_context>\n  <clarity>Use clear, concise English without VFP jargon. Make the code's purpose immediately understandable.</clarity>\n</commenting_principles>\n\n<comment_placement_rules>\n  <header_comments>Every file MUST start with a comprehensive header block using * comment style</header_comments>\n  <block_comments>Place explanatory comments ABOVE code blocks, not inline for multi-line explanations</block_comments>\n  <inline_comments>Use sparingly with && only for critical single-line clarifications</inline_comments>\n  <section_comments>Add section headers before logical code groups to explain upcoming functionality</section_comments>\n</comment_placement_rules>\n\n<documentation_priorities>\n  <must_document>\n    - Program purpose and business problem it solves\n    - All parameters with types and purposes\n    - Return values and their meanings\n    - Database operations and table interactions\n    - Business rules and decision logic\n    - Error handling and recovery paths\n    - External dependencies and integrations\n    - Side effects and state changes\n  </must_document>\n</documentation_priorities>\n\n<output_requirements>\n  <format>Return the complete file with all original code preserved and new comments added</format>\n  <style>Use VFP comment syntax: * for block comments, && for inline comments</style>\n  <completeness>Every complex operation must have an explanatory comment</completeness>\n</output_requirements>",
    "user_prompt_template": "<task>Add comprehensive educational comments to this Visual FoxPro file while preserving all original code exactly as provided.</task>\n\n<file_info>\n  <filename>{filename}</filename>\n  <path>{relative_path}</path>\n  <size>{file_size} bytes</size>\n</file_info>\n\n<requirements>\n  <header_block>\n    Create a comprehensive header using this format:\n    * ===================================================================\n    * Program: {filename}\n    * Purpose: [Brief description of what this program/procedure does]\n    * \n    * [Extended description of the program's role in the system]\n    * [Business context and why this program exists]\n    *\n    * Parameters: (if applicable)\n    *   param1 - [Type and purpose]\n    *   param2 - [Type and purpose]\n    *\n    * Returns: [What the program returns, if applicable]\n    *\n    * Dependencies:\n    *   - [List of called programs, external files, or requirements]\n    *\n    * Database Tables: [List tables accessed/modified]\n    *\n    * Key Business Logic:\n    *   - [Summary of main business rules implemented]\n    * ===================================================================\n  </header_block>\n\n  <section_comments>\n    Before each logical section, add:\n    * ===== [Section Purpose] =====\n    * [What this section does]\n    * [Why it's needed in the workflow]\n    * [Important side effects or state changes]\n  </section_comments>\n\n  <code_block_comments>\n    Above each significant code block, add explanatory comments describing:\n    - The business logic being implemented\n    - Why this approach was chosen\n    - What the code accomplishes\n    - Any important context\n  </code_block_comments>\n\n  <specific_patterns>\n    <database_operations>Document all SQL operations, explaining what data is retrieved/modified and why</database_operations>\n    <error_handling>Explain error scenarios, recovery strategies, and user notifications</error_handling>\n    <business_rules>Translate all business logic into plain English explanations</business_rules>\n    <parameters>Document each parameter's type, purpose, and valid values</parameters>\n    <variables>Explain key variables and what they store</variables>\n  </specific_patterns>\n</requirements>\n\n<critical_rules>\n  <preservation>DO NOT modify any original code line - only ADD comment lines</preservation>\n  <placement>Place explanatory comments ABOVE the code they describe</placement>\n  <language>Write in plain English for developers unfamiliar with VFP</language>\n  <focus>Emphasize WHY over WHAT - explain business logic and decisions</focus>\n</critical_rules>\n\n<code_content>\n{code_content}\n</code_content>\n\n<instructions>\n  Return the COMPLETE file with:\n  1. Comprehensive header block at the top\n  2. All original code lines preserved exactly\n  3. Educational comments added above code blocks\n  4. Business logic explained in plain English\n  5. All database operations documented\n  6. Error handling paths explained\n  \n  Remember: This is for developers who don't know VFP syntax. Make the code's purpose and logic crystal clear through your comments.\n</instructions>",
    "comment_style": "comprehensive",
    "code_preservation": "strict",
    "max_retries_for_validation": 3
  },
  "logging": {
    "log_level": "INFO",
    "log_file": "vfp_commenting.log",
    "progress_file": "processing_progress.json",
    "enable_console_logging": true,
    "enable_file_logging": true,
    "log_validation_details": true
  },
  "safety": {
    "require_code_hash_match": true,
    "require_line_count_match": false,
    "require_manual_confirmation": false,
    "max_file_size_mb": 10,
    "backup_before_processing": false,
    "validate_vfp_syntax": true,
    "halt_on_validation_failure": false
  }
}
